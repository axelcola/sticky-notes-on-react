{"ast":null,"code":"var _jsxFileName = \"E:\\\\proyectos-web\\\\react-sticky-notes\\\\src\\\\components\\\\NoteList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport NavbarNotes from \"./NavbarNotes\";\nimport NewNote from \"./NewNote\";\nimport Note from \"./Note\";\nimport \"./noteList.css\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteList = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n\n  const addTask = task => {\n    task.text = task.text.trim();\n    const updtatedTasks = [task, ...tasks];\n    setTasks(updtatedTasks);\n    window.localStorage.setItem(\"notes\", JSON.stringify(updtatedTasks));\n  };\n\n  const searcherInfo = textsearch => {\n    const savedTasks = JSON.parse(localStorage.getItem(\"notes\"));\n    if (savedTasks) setTasks(savedTasks);\n\n    if (textsearch) {\n      const results = savedTasks.filter(task => task.text.toLowerCase().includes(textsearch));\n      setTasks(results);\n    }\n  };\n\n  const editNote = note => {\n    const noteToChange = tasks.map(task => {\n      if (task.id === note.id) {\n        task.text = note.text;\n        task.color = note.color;\n      }\n\n      return task;\n    });\n    setTasks(noteToChange);\n    window.localStorage.setItem(\"notes\", JSON.stringify(noteToChange));\n  };\n\n  const deleteNote = id => {\n    const deletedNotes = tasks.map(task => {\n      if (task.id === id) {\n        task.deleted = !task.deleted;\n      }\n\n      return task;\n    });\n    setTasks(deletedNotes);\n    window.localStorage.setItem(\"notes\", JSON.stringify(deletedNotes));\n  };\n\n  useEffect(() => {\n    const savedTasks = JSON.parse(localStorage.getItem(\"notes\"));\n    if (savedTasks) setTasks(savedTasks);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: result => console.log(\"result\"),\n    children: [/*#__PURE__*/_jsxDEV(NavbarNotes, {\n      number: tasks,\n      searcher: searcherInfo,\n      paperbin: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(NewNote, {\n        onSubmit: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"notelist-drop\",\n        children: droppableProvided => /*#__PURE__*/_jsxDEV(\"div\", { ...droppableProvided.droppableProps,\n          innerRef: droppableProvided.innerRef,\n          className: \" notelist\",\n          children: [tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: draggableProvider => {\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...draggableProvider.draggableProps,\n                innerRef: draggableProvider.innerRef,\n                ...draggableProvider.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(Note, {\n                  id: task.id,\n                  text: task.text,\n                  deleted: task.deleted,\n                  date: task.date,\n                  deleteNote: deleteNote,\n                  className: task.deleted ? \"deleted\" : \"\",\n                  color: task.color,\n                  editNote: editNote,\n                  placeholder: task.placeholder,\n                  title: task.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 23\n              }, this);\n            }\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)), droppableProvided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c = NoteList;\nexport default NoteList; // ............................................................\n// Function to add a note with the button fixed in the screen\n// const [input, setInput] = useState(\"\");\n// const [color, setColor] = useState(\"turquoise\");\n// const newNoteData = (text, colorProps) => {\n//   setInput(text);\n//   setColor(colorProps);\n//   console.log(input, color, text, colorProps);\n// };\n// const noteSubmit = () => {\n//   const newTask = {\n//     id: uuidv4(),\n//     text: input,\n//     deleted: false,\n//     date: getCurrentDate(),\n//     color: \"yellow\",\n//     placeholder: \"Empty Note\",\n//   };\n//   addTask(newTask);\n//   document.getElementById(\"inputNote\").value = \"\";\n//   setColor(\"turquoise\");\n//   setInput(\"\");\n// };\n// ............................................................\n\n/* <button className=\"new-note-fixed\" onClick={noteSubmit}>\r\n  <AiOutlinePlusCircle size={40} />\r\n</button> */\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteList\");","map":{"version":3,"sources":["E:/proyectos-web/react-sticky-notes/src/components/NoteList.js"],"names":["React","useEffect","useState","NavbarNotes","NewNote","Note","DragDropContext","Droppable","Draggable","NoteList","tasks","setTasks","addTask","task","text","trim","updtatedTasks","window","localStorage","setItem","JSON","stringify","searcherInfo","textsearch","savedTasks","parse","getItem","results","filter","toLowerCase","includes","editNote","note","noteToChange","map","id","color","deleteNote","deletedNotes","deleted","result","console","log","droppableProvided","droppableProps","innerRef","index","draggableProvider","draggableProps","dragHandleProps","date","placeholder","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NavbarNotes from \"./NavbarNotes\";\r\nimport NewNote from \"./NewNote\";\r\nimport Note from \"./Note\";\r\nimport \"./noteList.css\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst NoteList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const addTask = (task) => {\r\n    task.text = task.text.trim();\r\n    const updtatedTasks = [task, ...tasks];\r\n    setTasks(updtatedTasks);\r\n    window.localStorage.setItem(\"notes\", JSON.stringify(updtatedTasks));\r\n  };\r\n  const searcherInfo = (textsearch) => {\r\n    const savedTasks = JSON.parse(localStorage.getItem(\"notes\"));\r\n    if (savedTasks) setTasks(savedTasks);\r\n    if (textsearch) {\r\n      const results = savedTasks.filter((task) =>\r\n        task.text.toLowerCase().includes(textsearch)\r\n      );\r\n      setTasks(results);\r\n    }\r\n  };\r\n  const editNote = (note) => {\r\n    const noteToChange = tasks.map((task) => {\r\n      if (task.id === note.id) {\r\n        task.text = note.text;\r\n        task.color = note.color;\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(noteToChange);\r\n    window.localStorage.setItem(\"notes\", JSON.stringify(noteToChange));\r\n  };\r\n\r\n  const deleteNote = (id) => {\r\n    const deletedNotes = tasks.map((task) => {\r\n      if (task.id === id) {\r\n        task.deleted = !task.deleted;\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(deletedNotes);\r\n    window.localStorage.setItem(\"notes\", JSON.stringify(deletedNotes));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const savedTasks = JSON.parse(localStorage.getItem(\"notes\"));\r\n    if (savedTasks) setTasks(savedTasks);\r\n  }, []);\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={(result) => console.log(\"result\")}>\r\n      <NavbarNotes number={tasks} searcher={searcherInfo} paperbin={false} />\r\n      <div className=\"container\">\r\n        <NewNote onSubmit={addTask} />\r\n        <Droppable droppableId=\"notelist-drop\">\r\n          {(droppableProvided) => (\r\n            <div\r\n              {...droppableProvided.droppableProps}\r\n              innerRef={droppableProvided.innerRef}\r\n              className=\" notelist\"\r\n            >\r\n              {tasks.map((task, index) => (\r\n                <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                  {(draggableProvider) => {\r\n                    return (\r\n                      <div\r\n                        {...draggableProvider.draggableProps}\r\n                        innerRef={draggableProvider.innerRef}\r\n                        {...draggableProvider.dragHandleProps}\r\n                      >\r\n                        <Note\r\n                          id={task.id}\r\n                          text={task.text}\r\n                          deleted={task.deleted}\r\n                          date={task.date}\r\n                          deleteNote={deleteNote}\r\n                          className={task.deleted ? \"deleted\" : \"\"}\r\n                          color={task.color}\r\n                          editNote={editNote}\r\n                          placeholder={task.placeholder}\r\n                          title={task.title}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Draggable>\r\n              ))}\r\n              {droppableProvided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n\r\n// ............................................................\r\n// Function to add a note with the button fixed in the screen\r\n// const [input, setInput] = useState(\"\");\r\n// const [color, setColor] = useState(\"turquoise\");\r\n\r\n// const newNoteData = (text, colorProps) => {\r\n//   setInput(text);\r\n//   setColor(colorProps);\r\n//   console.log(input, color, text, colorProps);\r\n// };\r\n// const noteSubmit = () => {\r\n//   const newTask = {\r\n//     id: uuidv4(),\r\n//     text: input,\r\n//     deleted: false,\r\n//     date: getCurrentDate(),\r\n//     color: \"yellow\",\r\n//     placeholder: \"Empty Note\",\r\n//   };\r\n//   addTask(newTask);\r\n//   document.getElementById(\"inputNote\").value = \"\";\r\n//   setColor(\"turquoise\");\r\n//   setInput(\"\");\r\n// };\r\n// ............................................................\r\n/* <button className=\"new-note-fixed\" onClick={noteSubmit}>\r\n  <AiOutlinePlusCircle size={40} />\r\n</button> */\r\n"]},"metadata":{},"sourceType":"module"}